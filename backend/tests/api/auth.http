###
# 喝水 APP 后端 API 测试
# 认证模块 REST Client 测试文件
# 
# 使用方法：
# 1. 确保后端服务运行在 http://localhost:3000
# 2. 在 VS Code 中安装 REST Client 插件
# 3. 点击请求上方的 "Send Request" 按钮执行测试
###

# ======================
# 环境变量配置
# ======================
@baseUrl = http://localhost:3000
@apiVersion = v1
@apiPrefix = {{baseUrl}}/api/{{apiVersion}}

# 测试用户数据
@testEmail = test_user_{{$randomInt 1000 9999}}@example.com
@testUsername = testuser{{$randomInt 1000 9999}}
@testPassword = TestPass123
@testFullName = 测试用户

# ======================
# 1. 用户注册接口测试
# ======================

### 1.1 成功注册 - 包含完整信息
# @name registerSuccess
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "username": "{{testUsername}}",
  "password": "{{testPassword}}",
  "fullName": "{{testFullName}}",
  "gender": "male",
  "dateOfBirth": "1990-01-15",
  "height": 175,
  "weight": 70,
  "activityLevel": "moderately_active"
}

### 1.2 注册 - 最小必需信息
# @name registerMinimal
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "minimal_{{$randomInt 1000 9999}}@example.com",
  "username": "minimal{{$randomInt 1000 9999}}",
  "password": "MinPass123"
}

### 1.3 注册失败 - 邮箱已存在
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "username": "duplicate{{$randomInt 1000 9999}}",
  "password": "{{testPassword}}"
}

### 1.4 注册失败 - 用户名已存在
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "duplicate_{{$randomInt 1000 9999}}@example.com",
  "username": "{{testUsername}}",
  "password": "{{testPassword}}"
}

### 1.5 注册失败 - 密码格式错误
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "weakpass_{{$randomInt 1000 9999}}@example.com",
  "username": "weakpass{{$randomInt 1000 9999}}",
  "password": "weak"
}

### 1.6 注册失败 - 邮箱格式错误
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "invalid-email-format",
  "username": "invalidemail{{$randomInt 1000 9999}}",
  "password": "{{testPassword}}"
}

### 1.7 注册失败 - 用户名太短
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "shortname_{{$randomInt 1000 9999}}@example.com",
  "username": "ab",
  "password": "{{testPassword}}"
}

### 1.8 注册失败 - 身高超出范围
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "talluser_{{$randomInt 1000 9999}}@example.com",
  "username": "talluser{{$randomInt 1000 9999}}",
  "password": "{{testPassword}}",
  "height": 300
}

### 1.9 注册失败 - 缺少必需字段
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "incomplete_{{$randomInt 1000 9999}}@example.com",
  "password": "{{testPassword}}"
}

# ======================
# 2. 用户登录接口测试
# ======================

### 2.1 成功登录 - 使用邮箱
# @name loginWithEmail
POST {{apiPrefix}}/auth/login
Content-Type: application/json

{
  "login": "{{testEmail}}",
  "password": "{{testPassword}}",
  "deviceInfo": {
    "id": "device-001",
    "name": "Test Device",
    "type": "desktop",
    "platform": "web"
  }
}

### 2.2 成功登录 - 使用用户名
# @name loginWithUsername
POST {{apiPrefix}}/auth/login
Content-Type: application/json

{
  "login": "{{testUsername}}",
  "password": "{{testPassword}}",
  "deviceInfo": {
    "id": "device-002",
    "name": "Mobile Test",
    "type": "mobile",
    "platform": "ios"
  }
}

### 2.3 登录失败 - 错误密码
POST {{apiPrefix}}/auth/login
Content-Type: application/json

{
  "login": "{{testEmail}}",
  "password": "WrongPassword123"
}

### 2.4 登录失败 - 用户不存在
POST {{apiPrefix}}/auth/login
Content-Type: application/json

{
  "login": "nonexistent@example.com",
  "password": "{{testPassword}}"
}

# ======================
# 3. 令牌相关测试
# ======================

### 3.1 刷新令牌 - 需要从登录响应中获取 refreshToken
@refreshToken = {{loginWithEmail.response.body.$.data.tokens.refreshToken}}

POST {{apiPrefix}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}"
}

### 3.2 刷新令牌失败 - 无效令牌
POST {{apiPrefix}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "invalid_refresh_token"
}

# ======================
# 4. 需要认证的接口测试
# ======================

### 4.1 获取会话列表
@accessToken = {{loginWithEmail.response.body.$.data.tokens.accessToken}}

GET {{apiPrefix}}/auth/sessions
Authorization: Bearer {{accessToken}}

### 4.2 发送邮箱验证邮件
POST {{apiPrefix}}/auth/verify-email
Authorization: Bearer {{accessToken}}
Content-Type: application/json

### 4.3 登出当前会话
POST {{apiPrefix}}/auth/logout
Authorization: Bearer {{accessToken}}
Content-Type: application/json

### 4.4 从所有设备登出
POST {{apiPrefix}}/auth/logout-all
Authorization: Bearer {{accessToken}}
Content-Type: application/json

# ======================
# 5. 密码重置测试
# ======================

### 5.1 发送密码重置邮件
POST {{apiPrefix}}/auth/forgot-password
Content-Type: application/json

{
  "email": "{{testEmail}}"
}

### 5.2 发送密码重置邮件 - 不存在的邮箱
POST {{apiPrefix}}/auth/forgot-password
Content-Type: application/json

{
  "email": "nonexistent_{{$randomInt 1000 9999}}@example.com"
}

### 5.3 重置密码 - 需要有效的重置令牌
POST {{apiPrefix}}/auth/reset-password
Content-Type: application/json

{
  "token": "your_reset_token_here",
  "newPassword": "NewPassword123"
}

# ======================
# 6. 限流测试
# ======================

### 6.1 快速重复注册请求 (测试限流)
# 注意：这会触发限流机制，连续发送多个请求

POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "ratelimit1_{{$randomInt 1000 9999}}@example.com",
  "username": "ratelimit1{{$randomInt 1000 9999}}",
  "password": "RateTest123"
}

###
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "ratelimit2_{{$randomInt 1000 9999}}@example.com",
  "username": "ratelimit2{{$randomInt 1000 9999}}",
  "password": "RateTest123"
}

###
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "ratelimit3_{{$randomInt 1000 9999}}@example.com",
  "username": "ratelimit3{{$randomInt 1000 9999}}",
  "password": "RateTest123"
}

###
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "ratelimit4_{{$randomInt 1000 9999}}@example.com",
  "username": "ratelimit4{{$randomInt 1000 9999}}",
  "password": "RateTest123"
}

###
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "ratelimit5_{{$randomInt 1000 9999}}@example.com",
  "username": "ratelimit5{{$randomInt 1000 9999}}",
  "password": "RateTest123"
}

###
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "ratelimit6_{{$randomInt 1000 9999}}@example.com",
  "username": "ratelimit6{{$randomInt 1000 9999}}",
  "password": "RateTest123"
}

# ======================
# 7. 边界条件测试
# ======================

### 7.1 注册 - 用户名边界长度测试 (20字符)
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "boundary_{{$randomInt 1000 9999}}@example.com",
  "username": "abcdefghijklmnopqrst",
  "password": "{{testPassword}}"
}

### 7.2 注册 - 姓名边界长度测试 (50字符)
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "longname_{{$randomInt 1000 9999}}@example.com",
  "username": "longname{{$randomInt 1000 9999}}",
  "password": "{{testPassword}}",
  "fullName": "这是一个非常长的姓名用来测试边界条件这是一个非常长的姓名用来测试边界条件这是一个非常长的姓名"
}

### 7.3 注册 - 身高体重边界值测试
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "boundary2_{{$randomInt 1000 9999}}@example.com",
  "username": "boundary2{{$randomInt 1000 9999}}",
  "password": "{{testPassword}}",
  "height": 100,
  "weight": 30
}

# ======================
# 8. 字符集和特殊字符测试
# ======================

### 8.1 注册 - 中文姓名
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "chinese_{{$randomInt 1000 9999}}@example.com",
  "username": "chinese{{$randomInt 1000 9999}}",
  "password": "{{testPassword}}",
  "fullName": "张三丰"
}

### 8.2 注册 - 包含数字和下划线的用户名
POST {{apiPrefix}}/auth/register
Content-Type: application/json

{
  "email": "special_{{$randomInt 1000 9999}}@example.com",
  "username": "test_user_123",
  "password": "{{testPassword}}"
}

# ======================
# 测试说明
# ======================

###
# 测试执行指南：
# 
# 1. 确保后端服务正在运行 (npm run dev)
# 2. 按顺序执行测试，某些测试依赖前面测试的结果
# 3. 观察响应状态码和返回数据
# 4. 预期结果：
#    - 1.1, 1.2: 应该返回 201 状态码，注册成功
#    - 1.3, 1.4: 应该返回 409 状态码，用户已存在
#    - 1.5-1.9: 应该返回 400 状态码，验证失败
#    - 2.1, 2.2: 应该返回 200 状态码，登录成功并返回令牌
#    - 2.3, 2.4: 应该返回 401 状态码，登录失败
#    - 限流测试: 第6个请求应该返回 429 状态码
# 
# 5. 注意事项：
#    - 每次运行会生成随机的测试数据，避免冲突
#    - 某些测试需要有效的令牌，确保先执行登录测试
#    - 限流测试可能影响后续请求，建议单独执行
###
